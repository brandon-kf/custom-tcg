"""A selector that poses choices to a player."""

from __future__ import annotations

import logging
from typing import TYPE_CHECKING, override

from custom_tcg.core.action import Action
from custom_tcg.core.anon import Action as AnonymousAction
from custom_tcg.core.card.select import Select
from custom_tcg.core.dimension import ActionStateDef
from custom_tcg.core.interface import IExecutionContext

if TYPE_CHECKING:
    from collections.abc import Callable

    from custom_tcg.core.interface import (
        IAction,
        ICard,
        IExecutionContext,
        INamed,
        IPlayer,
    )


logger: logging.Logger = logging.getLogger(name=__name__)


class SelectByChoice(Select):
    """A selector that poses choices to a player."""

    accept_n: list[int]
    confirm_action: IAction
    cancel_action: IAction
    choice_actions: list[IAction]

    def __init__(  # noqa: PLR0913
        self: SelectByChoice,
        name: str,
        card: ICard,
        player: IPlayer,
        options: list | Callable[[IExecutionContext], list],
        require_n: bool,  # noqa: FBT001
        accept_n: int | list[int],
        bind: Callable[[IAction, ICard, IPlayer], bool] | None = None,
    ) -> None:
        """Construct a choice selector."""
        super().__init__(
            name=name,
            card=card,
            player=player,
            options=options,
            n=0,
            bind=bind,
        )

        self.accept_n = [accept_n] if isinstance(accept_n, int) else accept_n
        self.require_n = require_n

        self.confirm_action = AnonymousAction(
            name="Confirm",
            card=self.card,
            player=self.player,
            enter=lambda context: None,  # noqa: ARG005
        )

        self.cancel_action = AnonymousAction(
            name="Cancel",
            card=self.card,
            player=self.player,
            enter=lambda context: None,  # noqa: ARG005
        )

        self.confirm_action.state = ActionStateDef.not_started
        self.cancel_action.state = ActionStateDef.not_started
        self.choice_actions = []

    @override
    def reset_state(self: SelectByChoice) -> None:
        """Get this selector ready for its next use."""
        super().reset_state()

        self.confirm_action.state = ActionStateDef.not_started
        self.cancel_action.state = ActionStateDef.not_started
        self.choice_actions = []

    @override
    def speculate(self: SelectByChoice) -> bool:
        return len(self.options) >= min(self.accept_n)

    @override
    def enter(self: SelectByChoice, context: IExecutionContext) -> None:
        """Create selector choices."""
        super().enter(context=context)

        self.choice_actions = [
            *(
                SelectByChoiceOption(
                    name=f"Select '{option.name}'",
                    selected=option,
                    selector=self,
                    card=self.card,
                    player=self.player,
                )
                for option in self.options
            ),
        ]

        self.choice_actions.append(self.confirm_action)

        if not self.require_n:
            self.choice_actions.append(self.cancel_action)

        context.choices = list(self.choice_actions)

        self.state = ActionStateDef.input_requested

    @override
    def receive_input(self: SelectByChoice, context: IExecutionContext) -> None:
        """Evaluate if the selector acceptance criteria was satisfied."""
        super().receive_input(context=context)

        if (
            self.confirm_action.state == ActionStateDef.completed
            and len(self.selected) in self.accept_n
        ):
            self.state = ActionStateDef.completed

        elif self.confirm_action.state == ActionStateDef.completed:
            self.confirm_action.state = ActionStateDef.not_started

            context.choices = list(self.choice_actions)

            self.state = ActionStateDef.input_requested

        elif self.cancel_action.state == ActionStateDef.completed:
            self.state = ActionStateDef.cancelled

        else:
            self.state = ActionStateDef.input_requested

    @override
    def complete(self: SelectByChoice, context: IExecutionContext) -> None:
        """Make sure choices don't spill over anywhere else."""
        super().complete(context=context)

        context.choices = []

    @override
    def cancel(self: SelectByChoice, context: IExecutionContext) -> None:
        """Make sure choices don't spill over anywhere else."""
        super().cancel(context=context)

        context.choices = []


class SelectByChoiceOption(Action):
    """A single choice to select, generated by a `Selector`."""

    selector: SelectByChoice
    selected: INamed

    def __init__(
        self: SelectByChoiceOption,
        name: str,
        selected: INamed,
        selector: SelectByChoice,
        card: ICard,
        player: IPlayer,
    ) -> None:
        """Create a selector choice."""
        super().__init__(
            name=name,
            card=card,
            player=player,
        )
        self.selector = selector
        self.selected = selected

    @override
    def enter(self: SelectByChoiceOption, context: IExecutionContext) -> None:
        super().enter(context=context)

        self.selector.selected.append(self.selected)
        self.selector.n = (
            self.selector.n + 1 if self.selector.n is not None else 1
        )
